#!/usr/bin/python

import os
import sys
import logging
import argparse

from racepro import racetest

desc = 'Automate Racepro race detection'
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-d', '--debug', dest='debug',
                    action='store_true', default=False,
                    help='Increase debug vebosity')
parser.add_argument('-v', '--verbose', dest='verbose',
                    action='store_true', default=False,
                    help='Increase vebosity level')
parser.add_argument('-q', '--quiet', dest='quiet',
                    action='store_true', default=False,
                    help='If set, redirect stdout/err to a file')
parser.add_argument('-j', '--jailed', dest='jailed',
                    action='store_true', default=False,
                    help='If set, run in jailed envrionment')
parser.add_argument('-n', '--netns', dest='netns',
                    action='store_true', default=False,
                    help='Use a separate network namespace in jail')
parser.add_argument('-c', '--max-races', dest='max_races',
                    metavar='MAX', type=int, default=100,
                    help='Limit results to MAX races')
parser.add_argument('--ignore-path', dest='ignore_path',
                    action='append', metavar='REGEX',
                    help='Ignore specific path (regular expression)')
parser.add_argument('-k', '--keep-going', dest='keepgoing', 
                    action='store_true', default=False, 
                    help='Keep going with other logs on divergence of one log')
parser.add_argument('-i', '--initproc', dest='initproc',
                    action='store_true', default=False,
                    help='Record/replay using a designated init-process')
parser.add_argument('-t', '--timeout', dest='timeout', type=int,
                    metavar='S', default=1,
                    help='Interval for periodic deadlock detection')
parser.add_argument('-m', '--max-runtime', dest='max_runtime', type=int,
                    metavar='S', default=None,
                    help='Timeout for forced session termination')
parser.add_argument('-a', '--archive', dest='archive',
                    action='store_true', default=False,
                    help='Save scratch directories for late inspection')
parser.add_argument('-o', '--outdir', dest='outdir',
                    default=None, metavar='DIR',
                    help='Location for output files (default: /presist/TEST')
parser.add_argument('-r', '--root', dest='chroot',
                    default=None, metavar='DIR',
                    help='Record/replay within a chroot environment')
parser.add_argument('-C', '--conf', dest='config',
                    default=None, metavar='CONF',
                    help='Use a racepro config file')
parser.add_argument('-T', '--toctou', dest='toctou',
                    default=False, action='store_true',
                    help='Toctou generic attack script')
parser.add_argument('--no-exit-races', dest='no_exit_races',
                    action='store_true', default=False,
                    help='Do not detect exit-exit-wait race')
parser.add_argument('--no-signal-races', dest='no_signal_races',
                    action='store_true', default=False,
                    help='Do not detect signal race')
parser.add_argument('-x', '--race-file', dest='race_file',
                    default=None, metavar='FILE',
                    help='Use the test cases specified in FILE')
parser.add_argument('-X', '--race-list', dest='race_list',
                    default=None, metavar='N[:N...]',
                    help='Indicate which race numbres to test')
parser.add_argument('--skip-record', dest='skip_record',
                    action='store_true', default=False,
                    help='Skip record step - reuse existing logs')
parser.add_argument('--skip-predetect', dest='skip_predetect',
                    action='store_true', default=False,
                    help='Skip predetect replay step')
parser.add_argument('--skip-findrace', dest='skip_findrace',
                    action='store_true', default=False,
                    help='Skip find-race step - reuse existing races')
parser.add_argument('--skip-testrace', dest='skip_testrace',
                    action='store_true', default=False,
                    help='Skip test-race step - do not try to replay')
parser.add_argument('tests', metavar='TEST[:PREFIX]', nargs='*',
                    help='TEST program to run (optional PREFIX for output)')

args = parser.parse_args()

log = logging.ERROR
if args.verbose: log = logging.INFO
if args.debug: log = logging.DEBUG
logging.basicConfig(level=log, stream=sys.stdout)

if args.config:

    def bool_val(s):
        return True if s.lower() == 'true' else False

    with open(args.config, 'r') as file:
        print('reading config file %s' % args.config)
        for l in file:
            l.strip()
            if l[0] in set(['#', '\n']):
                continue;
            k, v = [ s.strip() for s in l.split('=') ]
            v = v.replace('%PWD', os.getcwd())

            print('%s = %s' % (k, v))

            if k == 'name': args.name = v
            elif k == 'timeout': args.timeout = v
            elif k == 'max_races': args.max_races = v
            elif k == 'script-run': args.run = v
            elif k == 'script-pre': args.pre = v
            elif k == 'script-post': args.post = v
            elif k == 'script-test': args.test = v
            elif k == 'jailed': args.jailed = bool_val(v)

            elif k == 'toctou': args.toctou = bool_val(v)

            elif k == 'initproc': args.initproc = bool_val(v)
            elif k == 'max-runtime': args.max_runtime = v
            elif k == 'archive': args.archive = bool_val(v)
            elif k == 'netns': args.netns = bool_val(v)

            elif k == 'outdir': args.outdir = v
            elif k == 'redirect': args.redirect = bool_val(v)

            elif k == 'root': args.root = v
            elif k == 'scratch': args.scratch = v
            elif k == 'chroot': args.chroot = v

            else:
                print('Unknown key in racepro.conf: %s' % k)
                exit(1)

tests = list()

for t in args.tests:
    s = t.split(':')
    if len(s) == 1:
        s.append(s[0])
    tests.append((s[1], s[0]))

if len(tests) == 0:
    if 'run' not in args:
        print('No tests specified .. existing')
        exit(1)
    else:
        if 'name' not in args:
            print('Config file is missing "name = NAME" line')
            exit(1)
        tests = [(args.name, args.run)]

if not args.outdir:
    args.outdir = '/persist'

racetest.do_all_tests(args, tests)
