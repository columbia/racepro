#!/usr/bin/python

import os
import sys
import mmap
import pdb
import random
import struct
import argparse
import subprocess
import logging
import networkx
import pygraphviz
from itertools import *

import scribe
from racepro import racepro
from racepro import unistd

def load_session(logfile):
    """Load a scribe log from logfile"""
    try:
        f = open(logfile, 'r')
    except:
        print('Cannot open log file %s' % logfile)
        exit(1)

    m = mmap.mmap(f.fileno(), 0, prot=mmap.PROT_READ)
    e = list(scribe.EventsFromBuffer(m, remove_annotations=False))
    m.close()
    f.close()

    session = racepro.Session()
    session.load_events(e)

    return session

# YJF: remove holes in serial number sequence.
# NOTE: this method updates the event in place because we do not use event
# serials anywhere in racepro
# FIXME: this should really be in py-scribe because we essentially
# reverse engineer the serial assignment logic here.
def condense_events(events):
    # map from resource id to the previou event's (serial, seq, write_access)
    # serial: serial number
    # seq: sequence number ignoring access type
    # write_access: non zero if the event is a write
    serials = dict()  
    for e in events:
        if isinstance(e, scribe.EventResourceLockExtra):
            if e.id not in serials:
                e.serial = 0
                serials[e.id] = (0, 0, e.write_access)
            else:
                (prev_serial, seq, prev_wr) = serials[e.id]
                seq += 1
                if e.write_access or prev_wr:
                    e.serial = seq
                else:
                    e.serial = prev_serial
                serials[e.id] = (e.serial, seq, e.write_access)
        yield e

def save_session(logfile, events):
    """Save modified scribe log to logfile"""
    try:
        f = open(logfile, 'w')
    except:
        print('Cannot open log file %s' % logfile)
        exit(1)

    for e in condense_events(events):
        f.write(e.encode())

    f.close()

def _sudo(cmd):
    cmd = cmd.split() if os.geteuid() == 0 else ['sudo'] + cmd.split()
    return subprocess.call(cmd)

##############################################################################

def diet_graph(graph):
    for n in graph.nodes():
        if graph.in_degree(n) != 1 or graph.out_degree(n) != 1:
            continue
        t = graph.successors(n)[0]
        s = graph.predecessors(n)[0]
        if s.split(':')[0] != n.split(':')[0]:
            continue
        if n.split(':')[0] != t.split(':')[0]:
            continue
        graph.remove_edge(s, n)
        graph.remove_edge(n, t)
        graph.remove_node(n)
        graph.add_edge(s, t)

def show_graph(args):

    def do_filter_graph(graph):

        def convert(s):
            pid = int(s[0])
            s, e = map(int, s[1].split(':')) if len(s) > 1 else (0, sys.maxint)
            return (pid, (s, e))

        pids = dict(map(convert, [s.split('=') for s in args.pids.split(',')]))

        for s, t in graph.edges_iter():
            ps, ns = map(int, s.split(':'))
            pt, nt = map(int, t.split(':'))
            if (ps not in pids or ns < pids[ps][0] or ns > pids[ps][1] or
                pt not in pids or nt < pids[pt][0] or nt > pids[pt][1]):
                graph.remove_edge(s, t)
        for n in graph.nodes_iter():
            pn, nn = map(int, n.split(':'))
            if pn not in pids or nn < pids[pn][0] or nn > pids[pn][1]:
                graph.remove_node(n)

    def do_show_graph(graph, output):
        networkx.write_dot(graph, output + '.dot')
        if args.pdf:
            g = pygraphviz.AGraph(output + '.dot')
            g.layout(prog='dot')
            g.draw(output + '.pdf')

    session = load_session(args.logfile)
    graph = session.make_graph(full=False,
                               resources=False,
                               dependency=not args.nodepend)
    if args.pids: do_filter_graph(graph)
    if args.thin: diet_graph(graph)
    do_show_graph(graph, args.outfile + '.hb')

    session = load_session(args.logfile)
    graph = session.make_graph(full=True,
                               resources=True,
                               dependency=not args.nodepend)
    if args.pids: do_filter_graph(graph)
    if args.thin: diet_graph(graph)
    do_show_graph(graph, args.outfile + '.ob')

    return 0

##############################################################################
def show_syscalls(args):
    session = load_session(args.logfile)
    for pid in session.process_map.keys():
        print('')
        session.syscalls_process(pid)
    return 0

##############################################################################
def show_profile(args):
    session = load_session(args.logfile)
    for pid in session.process_map.keys():
        print('')
        session.profile_process(pid)
    return 0

##############################################################################

def filter_syscall(session, proc, index):
    event = session.events[index].event

    # getdents(): drop data* events to tolerate missing/unexpected
    # pids in /proc, and mark SCRIBE_PS_ENABLE_DATA to be unset

    if event.nr not in unistd.Syscalls.SYS_wait:
#   if event.nr == unistd.Syscalls.NR_getdents:
        replace = list()
        mask = (scribe.SCRIBE_PS_ENABLE_RESOURCE |
                scribe.SCRIBE_PS_ENABLE_RET_CHECK |
                scribe.SCRIBE_PS_ENABLE_DATA)
        for e in session.get_syscall_events(index, None):
            if (isinstance(e, scribe.EventData) or
                isinstance(e, scribe.EventDataExtra)):
                replace.append((e, None))

    # otherwise: do nothing and use default flags to be unset
    else:
        replace = None
        mask = (scribe.SCRIBE_PS_ENABLE_RESOURCE |
                scribe.SCRIBE_PS_ENABLE_RET_CHECK)

    return replace, mask

def find_pairwise_races(session, vclocks):
    """Find all pairwise races and return in a list"""
    all_races = session.races_resources(vclocks)
    logging.debug('total resource races %d' % (len(all_races)))

    sys_races = set()
    map_races = dict()

    for vc1, i1, vc2, i2 in all_races:
        s_ev1 = session.events[i1]
        r_ev1 = s_ev1.resource.events[s_ev1.rindex]
        proc1, pindex1 = session.r_ev_to_proc(r_ev1, sysind=True)
        p_ev1 = proc1.events[pindex1]
        node1 = session.make_node(proc1.pid, p_ev1.syscnt)

        s_ev2 = session.events[i2]
        r_ev2 = s_ev2.resource.events[s_ev2.rindex]
        proc2, pindex2 = session.r_ev_to_proc(r_ev2, sysind=True)
        p_ev2 = proc2.events[pindex2]
        node2 = session.make_node(proc2.pid, p_ev2.syscnt)

        logging.debug('[vc %s pid %d cnt %d  <->  vc %s pid %d cnt %d]' %
                      (vc1, proc1.pid, p_ev1.syscnt,
                       vc2, proc2.pid, p_ev2.syscnt))

        assert r_ev1.event.serial != r_ev2.event.serial, \
            'Race between %s and %s with same serial' % \
            (r_ev1.event, e_ev2.event)

        if r_ev1.event.serial < r_ev2.event.serial:
            node1, node2 = node2, node1
            i1, i2 = i2, i1

        logging.info('\tadding %s --> %s to races' % (node1, node2))

        sys_races.add((node1, node2))

        try:
            map_races[(node1, node2)].append((i1, i2))
        except KeyError:
            map_races[(node1, node2)] = list([(i1, i2)])

    return all_races, sys_races

def prep_pairwise_race(session, graph, vclocks, node1, node2, n_race):
    """prepare a race by computing bookmarks, injects, and cutoff"""
    proc1, cnt1 = session.split_node(node1)
    index1 = int(graph.node[node1]['index'])
    event1 = session.events[index1].event

    proc2, cnt2 = session.split_node(node2)
    index2 = int(graph.node[node2]['index'])
    event2 = session.events[index2].event

    # YJF: print out race
    if args.debug:
        print('Two racing system calls are:')
        sys.stdout.write('p%d @ %s:' % (proc1.pid, vclocks[(proc1, cnt1)]))
        session.parse_syscall(index1)
        sys.stdout.write('p%d @ %s:' % (proc2.pid, vclocks[(proc2, cnt2)]))
        session.parse_syscall(index2)

    bookmark1 = session.crosscut_graph(graph, vclocks, [node1, node2])

    if not bookmark1:
        print('No consistent cut: pid %d syscnt %d --> pid %d syscnt %d' %
              (proc1.pid, cnt1, proc2.pid, cnt2))
        return None

    bookmark2 = dict(bookmark1)
    bookmark2[proc1.pid] = -bookmark2[proc1.pid]
    bookmarks = [bookmark1, bookmark2]

    # for some syscalls replayed after a bookmark/inject we need to
    # filter some events, mainly data, dataextra and fence.
    replace, mask = filter_syscall(session, proc1, index1)

    action = racepro.Action(scribe.SCRIBE_INJECT_ACTION_PSFLAGS, 0, mask)

    injects = dict()
    injects[proc1.pid] = dict({-cnt1 : action})

    cutoff = dict(bookmark2)

    print('RACE %2d:  ' % (n_race + 1) +
          'pid %d syscnt %d [sys(%d)=%d]' %
          (proc1.pid, cnt1, event1.nr, event1.ret) +
          '  -->   pid %d syscnt %d [sys(%d)=%d]' %
          (proc2.pid, cnt2, event2.nr, event2.ret))
    print('          cut:  %s' % bookmark1.values())

    logging.debug('   boobkmark1: %s' % (bookmark1))
    logging.debug('   boobkmark2: %s' % (bookmark2))
    logging.debug('      injects: %s' % (injects))
    logging.debug('       cutoff: %s' % (cutoff))

    return bookmarks, injects, cutoff, None  # replace

def find_signal_races(session, vclocks):
    """Find all signal races and return in a list"""
    signal_races = session.races_signals(vclocks)
    logging.debug('total signal races %d' % (len(signal_races)))
    return signal_races

def prep_signal_race(session, graph, vclocks, signal, n_race):
    """prepare a race by computing bookmarks, injects, and cutoff
    If the signal interrupted the syscall, then make it not interrupt.
    If the signal did not interrupt the syscall, then make it interrupt.
    """
    cnt = signal.syscnt
    proc = session.events[signal.index].proc
    index = session.events[signal.index].pindex
    node = session.make_node(proc.pid, cnt)

    bookmark1 = session.crosscut_graph(graph, vclocks, [node])
    if not bookmark1:
        print('No consistent cut: pid %d syscnt %d' % proc.pid, cnt)
        return None

    bookmark2 = dict(bookmark1)
    bookmark2[proc.pid] = -bookmark2[proc.pid]
    bookmarks = [bookmark1, bookmark2]

    # bookmark1 is a crosscut of the graph consistent with the syscall
    # affected by the signal. we don't need another bookmark; instead,
    # we reverse the signal's effect by "reversing" the syscall return
    # value (from interrupted to non-interrupted or vice versa)

    injects = dict()

    action = racepro.Action(scribe.SCRIBE_INJECT_ACTION_PSFLAGS,
                            0, scribe.SCRIBE_PS_ENABLE_RESOURCE |
                            scribe.SCRIBE_PS_ENABLE_RET_CHECK)
    injects[proc.pid] = dict({-cnt : action})

    cutoff = dict(bookmark2)

    print('%s index %d syscnt %d' %
          (signal.event, signal.index, signal.syscnt))
    sysind = session.next_syscall(signal.index)
    syscall_old = session.events[sysind].event
    syscall_new = scribe.EventSyscallExtra()
    syscall_new.nr = syscall_old.nr

    if syscall_old.ret in unistd.EINTERRUPTED:
        syscall_new.ret = 0
    else:
        # FIXME: choice of ERESTARTSYS is arbitrary and probably
        # incorrect. specific error value should be syscall specific
        logging.warn('"reverse" signal race may be incorrect...')
        syscall_new.ret = unistd.ERESTARTSYS

    replace = list([(syscall_old, syscall_new)])

    print('RACE %2d:  ' % (n_race + 1) +
          'pid %d syscnt %d [sys(%d)=%d/%d]' %
          (proc.pid, cnt, syscall_old.nr, syscall_old.ret, syscall_new.ret))
    print('          cut:  %s' % bookmark1.values())

    logging.info('   boobkmark1: %s' % (bookmark1))
    logging.info('   boobkmark2: %s' % (bookmark2))
    logging.info('      injects: %s' % (injects))
    logging.info('       cutoff: %s' % (cutoff))
    logging.info('      replace: %s' % (replace))

    return bookmarks, injects, cutoff, replace

def find_exitwait_races(session, vclocks):
    """Find all exit-wait races and return in a list"""
    exit_races = session.races_exitwait(vclocks)
    logging.debug('total exit-races %d' % (len(exit_races)))
    return exit_races

def prep_exitwait_race(session, graph, vclocks, exit1, exit2, wait, n_race):
    """prepare a race by computing bookmarks, injects, and cutoff"""
    proc1, pindex1 = exit1
    p_ev1 = proc1.events[pindex1]
    event1 = p_ev1.event
    cnt1 = p_ev1.syscnt

    proc2, pindex2 = exit2
    p_ev2 = proc2.events[pindex2]
    event2 = p_ev2.event
    cnt2 = p_ev2.syscnt

    proc3, pindex3 = wait
    p_ev3 = proc3.events[pindex3]
    event3 = p_ev3.event
    cnt3 = p_ev3.syscnt

    if args.debug:
        print('Three racing system calls (exit-exit-wait) are:')
        sys.stdout.write('p%d @ %s:'
                         % (proc1.pid, vclocks[(proc1, cnt1)]))
        session.parse_syscall(proc1.events[pindex1].index)
        sys.stdout.write('p%d @ %s:' % (proc2.pid, vclocks[(proc2, cnt2)]))
        session.parse_syscall(proc2.events[pindex2].index)
        sys.stdout.write('p%d @ %s:' % (proc3.pid, vclocks[(proc3, cnt3)]))
        session.parse_syscall(proc3.events[pindex3].index)

    # TODO: extend crosscut_graph to handle 3-somes
    nodes = [session.make_node(proc1.pid, cnt1),
             session.make_node(proc2.pid, cnt2),
             session.make_node(proc3.pid, cnt3)]
    bookmark1 = session.crosscut_graph(graph, vclocks, nodes)

    if not bookmark1:
        print('No consistent cut: pid %d syscnt %d --> pid %d syscnt %d' %
              (proc1.pid, cnt1, proc2.pid, cnt2))
        return None

    bookmark2 = dict(bookmark1)
    bookmark2[proc1.pid] = -bookmark2[proc1.pid]

    bookmark3 = dict([(p, v) for p, v in bookmark2.items() if p != proc1.pid])
    bookmark3[proc3.pid] = -bookmark3[proc3.pid]

    bookmarks = [bookmark1, bookmark2, bookmark3]

    injects = dict()

    # we don't need scribe.SCRIBE_PS_ENABLE_DATA, because we know
    # our syscalls are wait() and exit()
    action1 = racepro.Action(scribe.SCRIBE_INJECT_ACTION_PSFLAGS,
                            0, scribe.SCRIBE_PS_ENABLE_RESOURCE |
                               scribe.SCRIBE_PS_ENABLE_RET_CHECK)
    injects[proc1.pid] = dict({-cnt1 : action1})
    action2 = racepro.Action(scribe.SCRIBE_INJECT_ACTION_PSFLAGS,
                            0, scribe.SCRIBE_PS_ENABLE_RESOURCE |
                               scribe.SCRIBE_PS_ENABLE_RET_CHECK)
    injects[proc3.pid] = dict({-cnt3 : action2})

    cutoff = dict(bookmark3)

    # get data (internal) event described wait() during replay
    syscall_old = proc3.events[pindex3].event
    syscall_new = scribe.EventSyscallExtra()
    syscall_new.nr = syscall_old.nr
    syscall_new.ret = proc1.pid

    e_data = session.get_syscall_events(proc3.events[pindex3].index,
                                        scribe.EventDataExtra)
    data_old = e_data.pop()[0]
    data_new = scribe.EventDataExtra()
    data_new.data_type = scribe.SCRIBE_DATA_INTERNAL
    data_new.data = struct.pack('i', proc1.pid)
    data_new.user_ptr = 0

    replace = list([(syscall_old, syscall_new), (data_old, data_new)])

    # consider a exit-exit-wait race: C exited first, A collected and
    # then B exited. To reorder B and C, we will (1) bookmark everyone
    # prior to the respective syscall, (2) let C execute exit and then
    # bookmark, (3) let A collect C and then another bookmark, and
    # they all resume normal exeution.
    #
    # this is more complicated if the task that waits (A) is init. if
    # we allow task A to attempt wait for C, then A may wait forever
    # because C may remain a child of B (so cannot be reaped by A)...
    # therefore A never reaches the third bookmark and the execution
    # as a whole reaches a deadlock.
    #
    # to address this case, we change the details: we make B and C
    # both run their respective exit calls before hitting, both, the
    # second bookmark. and then let A collect C first, and all go live.

    if proc3.pid == 1 and proc1.ppid != 1:
        if ((proc1.ppid in cutoff and cutoff[proc1.ppid] == 0) or
            (proc1.ppid == proc2.pid)):

            # discard the 3rd bookmark, allow proc2 to also exit, and
            # finally extend the cut to occur after proc3's wait

            bookmark2[proc2.pid] = -bookmark2[proc2.pid]
            bookmark3 = dict()
            bookmarks = [bookmark1, bookmark2]
            cutoff = dict(bookmark2)
            cutoff[proc3.pid] = -cutoff[proc3.pid]
        else:
            print('exit-exit-wait race would deadlock .... ' +
                  'pid %d(%d) and pid %d(%d)' %
                  (proc1.pid, cnt1, proc2.pid, cnt2))
            return None

    print('RACE %2d:  ' % (n_race + 1) +
          'pid %d syscnt %d [sys(%d)=%d]' %
          (proc1.pid, cnt1, event1.nr, event1.ret) +
          '  -->   pid %d syscnt %d [sys(%d)=%d]' %
          (proc3.pid, cnt3, event3.nr, event3.ret) +
          '  -->   pid %d syscnt %d [sys(%d)=%d]' %
          (proc2.pid, cnt2, event2.nr, event2.ret))
    print('          cut:  %s' % bookmark1.values())

    logging.info('   boobkmark1: %s' % (bookmark1))
    logging.info('   boobkmark2: %s' % (bookmark2))
    logging.info('   boobkmark3: %s' % (bookmark3))
    logging.info('      injects: %s' % (injects))
    logging.info('       cutoff: %s' % (cutoff))
    logging.info('      replace: %s' % (replace))

    return bookmarks, injects, cutoff, replace

def save_modify_log(session, bookmarks, injects, cutoff, replace, output):
    """Generate and save a modified scribe log for a race"""

    # write the new logfile out
    event_iter = session.save_events(bookmarks, injects, cutoff, replace)
    save_session(output, event_iter)


def show_races(args):
    session = load_session(args.logfile)

    graph = session.make_graph(full=True,
                               resources=False,
                               dependency=not args.nodepend)
    logging.debug('graph: %s' % networkx.convert.to_edgelist(graph))

    vclocks = session.vclock_graph(graph)
    for k in vclocks.keys():
        logging.debug('%2d %5d -> %s' % (k[0].pid, k[1], vclocks[k]))

    # YJF: show sysaclls with clocks
    if args.debug:
        for proc in session.process_list:
            session.syscalls_process(proc.pid, vclocks)

    ######################################################################
    # step 1: Find pairwise races, (maybe) randomize the order. Then
    # for each race try to generate a (bookmarks, injects, cutoff)
    # tuple. Finally, use those to write out a modified log.

    all_races, sys_races = find_pairwise_races(session, vclocks)

    print('-' * 75)
    print('REGULAR RACES')
    print('Found %d potential races (%d after duplicates removal)' %
          (len(all_races), len(sys_races)))

    # YJF: sort them
    sys_races = sorted(sys_races, reverse=True,
                       key=lambda race: session.score_race(graph, race))
    logging.debug('sorted race list %s' % sys_races)

    if args.random:
        r = random.sample(sys_races, len(sys_races))
        print('Random sample to generate u pto %d races:' % (args.count))
    else:
        r = sys_races

    print('-' * 75)

    n_race = 0
    n_fail = 0
    for (node1, node2) in r:
        ret = prep_pairwise_race(session, graph, vclocks,
                                 node1, node2, n_race)
        if not ret:
            n_fail += 1
            continue
        n_race += 1

        (bookmarks, injects, cutoff, replace) = ret
        output = args.outfile + '.' + str(n_race) + '.log'
        save_modify_log(session, bookmarks, injects, cutoff, replace, output)

        if n_race == args.count:
            break;

    ######################################################################
    # step 2: Find exit-exit-wait races, Then for each race try to
    # generate a (bookmarks, injects, cutoff) tuple. Finally, use
    # those to write out a modified log.

    if(args.no_exit_races):
        exit_races = list()
    else:
        exit_races = find_exitwait_races(session, vclocks)

    print('-' * 75)
    print('EXIT-WAIT RACES')
    print('Found %d potential races' % len(exit_races))

    if args.random:
        r = random.sample(exit_races, len(exit_races))
        print('Random sample to generate up to %d races:' % (args.count))
    else:
        r = exit_races

    print('-' * 75)

    for (exit1, exit2, wait) in exit_races:
        ret = prep_exitwait_race(session, graph, vclocks,
                                 exit1, exit2, wait, n_race)
        if not ret:
            n_fail += 1
            continue
        n_race += 1

        (bookmarks, injects, cutoff, replace) = ret
        output = args.outfile + '.' + str(n_race) + '.log'
        save_modify_log(session, bookmarks, injects, cutoff, replace, output)

        if n_race == args.count:
            break

    ######################################################################
    # step 3: Find signal races, Then for each race try to generate a
    # (bookmarks, injects, cutoff) tuple. Finally, use those to write
    # out a modified log.

    if(args.no_signal_races):
        signal_races = list()
    else:
        signal_races = find_signal_races(session, vclocks)

    print('-' * 75)
    print('SIGNAL RACES')
    print('Found %d potential races' % len(signal_races))

    if args.random:
        r = random.sample(signal_races, len(signal_races))
        print('Random sample to generate up to %d races:' % (args.count))
    else:
        r = signal_races

    print('-' * 75)

    for signal in signal_races:
        ret = prep_signal_race(session, graph, vclocks, signal, n_race)
        if not ret:
            n_fail += 1
            continue
        n_race += 1

        (bookmarks, injects, cutoff, replace) = ret
        output = args.outfile + '.' + str(n_race) + '.log'
        save_modify_log(session, bookmarks, injects, cutoff, replace, output)

        if n_race == args.count:
            break

    ######################################################################
    # step 3: Statistics ..

    print('-' * 75)
    print('Generated %d logs out of total %d races examined' %
          (n_race, n_race + n_fail))
    print('-' * 75)

    return n_race

##############################################################################

def test_races(args):
    cmd_replay = 'replay -l 5 -c %d' % int(args.timeout)
    cmd_suffix = ' > /dev/null 2>&1' if args.silent else ''

    if args.detect:
        total = show_races(args)
    else:
        total = -1

    n = 0
    while True:
        n += 1
        if total >= 0 and n > total:
            break
        logfile = '%s.%d.log' % (args.outfile, n)
        if not os.access(logfile, os.R_OK):
            break

        if args.script_pre:
            r = _sudo(args.script_pre + cmd_suffix)
            if r > 0:
                print('RACE %d: bad exit code %d from pre-script' % (n, r))
                continue

        r = _sudo('%s %s %s' % (cmd_replay, logfile, cmd_suffix))
        if r == 35:
            print('REPLAY %2d: deadlock (exit %d)' % (n, r))
        if r > 0:
            print('REPLAY %2d: failed (exit %d)' % (n, r))
            if args.exitiffail:
                return -1 
        else:
            print('REPLAY %2d: completed' % n)

        if r == 0 and args.script_test:
            r = _sudo(args.script_test + cmd_suffix)
            if r == 2:
                print('    BUG PRODUCED')
            elif r > 0:
                print('RACE %d: bad exit code %d from test-script' % (n, r))
            else:
                print('    BUG not triggered')
        elif r == 0:
            print('    BUG only replayed')

        if args.script_post:
            r = _sudo(args.script_post + cmd_suffix)
            if r > 0:
                print('RACE %d: nad exit code %d from post-script' % (n, r))

    return 0

##############################################################################

parser_io = argparse.ArgumentParser(add_help=False)
parser_io.add_argument('-i', '--input', dest='logfile',
                       metavar='FILE', required=True)
parser_io.add_argument('-o', '--output', dest='outfile',
                       metavar='FILE', required=True)

parser_races = argparse.ArgumentParser(add_help=False)
parser_races.add_argument('-c', '--count', dest='count',
                          metavar='COUNT', type=int, default=1000,
                          help='Limit results to COUNT races')
parser_races.add_argument('-r', '--random', dest='random',
                          action='store_true', default=False,
                          help='List races in random order')
parser_races.add_argument('--no-depend', dest='nodepend',
                          action='store_true', default=False,
                          help='Disregard happened-before dependencies')
parser_races.add_argument('--no-exit-races', dest='no_exit_races',
                          action='store_true', default=False,
                          help='Do not detect exit-exit-wait race')
parser_races.add_argument('--no-signal-races', dest='no_signal_races',
                          action='store_true', default=False,
                          help='Do not detect signal race')

desc = 'Process and modify scribe execution log'
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-d', dest='debug',
                    action='store_true', default=False,
                    help='Increase debug vebosity')
parser.add_argument('-v', dest='verbose',
                    action='store_true', default=False,
                    help='Increase vebosity level')

subparsers = parser.add_subparsers(title='subcommands')

parser_show_graph = subparsers.add_parser(
    'show-graph', parents=[parser_io])
parser_show_graph.set_defaults(func=show_graph)
parser_show_graph.add_argument('-t', '--thin', dest='thin',
                               action='store_true',
                               help='Thin mode (minimal syscalls graph)')
parser_show_graph.add_argument('-p', '--pids', dest='pids',
                               metavar='PID[,PID...]', default='',
                               help='Pid(s) to include in the graph')
parser_show_graph.add_argument('--no-depend', dest='nodepend',
                               action='store_true', default=False,
                               help='Disregard happaned-before dependencies')
parser_show_graph.add_argument('--pdf', dest='pdf',
                               action='store_true',
                               help='Output graph in PDF format')

parser_show_syscalls = subparsers.add_parser(
    'show-syscalls', parents=[parser_io])
parser_show_syscalls.set_defaults(func=show_syscalls)

parser_show_profile = subparsers.add_parser(
    'show-profile', parents=[parser_io])
parser_show_profile.set_defaults(func=show_profile)

parser_show_races = subparsers.add_parser(
    'show-races', parents=[parser_io, parser_races])
parser_show_races.set_defaults(func=show_races)

parser_test_races = subparsers.add_parser(
    'test-races', parents=[parser_io, parser_races])
parser_test_races.set_defaults(func=test_races)
parser_test_races.add_argument('--script-pre', dest='script_pre',
                               default=None,
                               help='Script to run before test')
parser_test_races.add_argument('--timeout', dest='timeout',
                               default=1,
                               help='Log replay timeout')
parser_test_races.add_argument('--script-post', dest='script_post',
                               default=None,
                               help='Script to run after test')
parser_test_races.add_argument('--script-test', dest='script_test',
                               default=None,
                               help='Script to check success of test')
parser_test_races.add_argument('-s', '--silent', dest='silent',
                               action='store_true', default=False,
                               help='Hide scribe/scripts/tests output')
parser_test_races.add_argument('-d', '--detect', dest='detect',
                               action='store_true', default=False,
                               help='Detect races and generate logs')
parser_test_races.add_argument('--exit-on-failed-replay', dest='exitiffail',
                               action='store_true', default=False,
                               help='Exit when there is a failed replay')

args = parser.parse_args()

log = logging.ERROR
if args.verbose: log = logging.INFO
if args.debug: log = logging.DEBUG
logging.basicConfig(level=log, stream=sys.stdout)

ret = args.func(args)
exit(0 if ret >= 0 else -ret)
