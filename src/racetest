#!/usr/bin/python

import os
import sys
import logging
import argparse

import racetest 

desc = 'Automate Racepro race detection'
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-d', '--debug', dest='debug',
                    action='store_true', default=False,
                    help='Increase debug vebosity')
parser.add_argument('-v', '--verbose', dest='verbose',
                    action='store_true', default=False,
                    help='Increase vebosity level')
parser.add_argument('-q', '--quiet', dest='quiet',
                    action='store_true', default=False,
                    help='If set, redirect stdout/err to a file')
parser.add_argument('-k', '--keep-going', dest='keepgoing', 
                    action='store_true', default=False, 
                    help='Keep going with other logs on divergence of one log')
parser.add_argument('-r', '--root', dest='chroot',
                    default=None, metavar='DIR',
                    help='Record/replay within a chroot environment')
parser.add_argument('-i', '--initproc', dest='initproc',
                    action='store_true', default=False,
                    help='Record/replay using a designated init-process')
parser.add_argument('-c', '--conf', dest='config',
                    default=None, metavar='CONF_FILE',
                    help='Use a racepro config file')
parser.add_argument('-s', '--save', dest='save',
                    action='store_true', default=False,
                    help='Save scratch directories')
parser.add_argument('-o', '--outdir', dest='outdir',
                    default=None, metavar='DIR',
                    help='Location where to store the test output files')
parser.add_argument('-l', '--log-level', dest='logmask',
                    default=None, metavar='LEVEL',
                    help='Log mask argument, see record arguments.')
parser.add_argument('-f', '--log-flags', dest='logflags',
                    default=None, metavar='MASK',
                    help='Log mask argument, see record arguments.')
parser.add_argument('tests', metavar='TEST[:PREFIX]', nargs='*',
                    help='TEST program to run, and optional PREFIX for output')

args = parser.parse_args()

log = logging.ERROR
if args.verbose: log = logging.INFO
if args.debug: log = logging.DEBUG
logging.basicConfig(level=log, stream=sys.stdout)

if args.config:
    args.initproc = False
    args.mount = None
    args.scratch = None
    args.run = None
    args.pre = None
    args.post = None
    args.test = None
    args.save = None

    with open(args.config, 'r') as file:
        for l in file:
            l.strip()
            if l[0] in set(['#', '\n']):
                continue;
            k, v = [ s.strip() for s in l.split('=') ]
            v = v.replace('%PWD', os.getcwd())

            print('k=%s v=%s' % (k,v))

            if k == 'newpid': args.initproc = True
            elif k == 'mount': args.mount = v
            elif k == 'scratch': args.scratch = v
            elif k == 'script-run': args.run = v
            elif k == 'script-pre': args.pre = v
            elif k == 'script-post': args.post = v
            elif k == 'script-test': args.test = v
            elif k == 'save': args.save = True if v == 'True' else False
            else:
                print('Unknown key in racepro.conf: %s' % k)
                exit(1)

tests = list()

for t in args.tests:
    s = t.split(':')
    tt = t if len(s) == 1 else tt[1]
    tests.append((t, tt))

if len(tests) == 0:
    if args.run:
        tests = [(args.run, args.run)]
    else:
        print('No tests specified .. existing')
        exit(1)

args.root = '/'
args.scratch = 'scratch'
args.mount = 'mnt'

args.jailed = True

if not args.outdir:
    args.outdir = '/persist'

racetest.do_all_tests(args, tests)
